# Generated by Django 5.1.6 on 2025-05-27 10:03

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('events', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('full_name', models.CharField(max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('usertype', models.CharField(max_length=50)),
                ('areas_of_interest', models.JSONField(blank=True, default=list, null=True)),
                ('joined_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_login', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_verified', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users_customuser',
            },
        ),
        migrations.CreateModel(
            name='AlumniProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_id', models.CharField(blank=True, max_length=50, null=True)),
                ('qualification', models.CharField(choices=[('Bachelor', 'Bachelor'), ('Master', 'Master'), ('Doctorate', 'Doctorate'), ('Bachelor_Doctorate', 'Both Bachelor and Doctorate'), ('All', 'All (Bachelor, Master, Doctorate)'), ('Doctorate_Master', 'Doctorate and Master')], max_length=50)),
                ('field_of_study', models.CharField(choices=[('Applied Biology Program', 'Applied Biology Program'), ('Applied Chemistry', 'Applied Chemistry'), ('Applied Physics', 'Applied Physics'), ('Applied Geology', 'Applied Geology'), ('Applied Mathematics', 'Applied Mathematics'), ('Industrial Chemistry', 'Industrial Chemistry'), ('Pharmacy Program', 'Pharmacy Program'), ('Computer Science and Engineering', 'Computer Science and Engineering'), ('Electronics & Communication Engineering', 'Electronics & Communication Engineering'), ('Electrical Power and Control Engineering', 'Electrical Power and Control Engineering'), ('Software Engineering', 'Software Engineering'), ('Architecture', 'Architecture'), ('Civil Engineering', 'Civil Engineering'), ('Water Resources Engineering', 'Water Resources Engineering'), ('Chemical Engineering', 'Chemical Engineering'), ('Material Science and Engineering', 'Material Science and Engineering'), ('Mechanical Engineering', 'Mechanical Engineering')], max_length=100)),
                ('graduated_year', models.IntegerField()),
                ('employment_status', models.CharField(choices=[('Unemployed', 'Unemployed'), ('Employed', 'Employed')], max_length=50)),
                ('company', models.CharField(blank=True, max_length=255, null=True)),
                ('job_title', models.CharField(blank=True, max_length=255, null=True)),
                ('professional_field', models.CharField(blank=True, max_length=255, null=True)),
                ('work_history', models.JSONField(blank=True, null=True)),
                ('bio', models.TextField(blank=True, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='Profile_Picture/Alumni/')),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='alumni_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'alumni_profile',
            },
        ),
        migrations.CreateModel(
            name='CompanyProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(max_length=255)),
                ('company_address', models.CharField(max_length=255)),
                ('company_city', models.CharField(max_length=255)),
                ('postal_code', models.CharField(blank=True, max_length=20, null=True)),
                ('company_country', models.CharField(max_length=255)),
                ('website_url', models.URLField(blank=True, null=True)),
                ('contact_person_phone_number', models.CharField(max_length=20)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='Profile_Picture/Company/')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='company_profiles', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'company_profile',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('new_resource', 'New Resource Shared'), ('connect_request', 'New Connection Request'), ('connect_accept', 'Connection Accepted'), ('event_announcement', 'New Event Announcement'), ('new_message', 'New Message'), ('new_opportunity', 'New Opportunity'), ('internship_application_status', 'Internship Application Status'), ('job_application_status', 'Job Application Status'), ('event_deleted', 'Event Deleted'), ('new_event', 'New Event')], max_length=50)),
                ('message', models.TextField()),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('event', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='events.event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'notification',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='StaffProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.CharField(max_length=255)),
                ('department', models.CharField(choices=[('Applied Biology Program', 'Applied Biology Program'), ('Applied Chemistry', 'Applied Chemistry'), ('Applied Physics', 'Applied Physics'), ('Applied Geology', 'Applied Geology'), ('Applied Mathematics', 'Applied Mathematics'), ('Industrial Chemistry', 'Industrial Chemistry'), ('Pharmacy Program', 'Pharmacy Program'), ('Computer Science and Engineering', 'Computer Science and Engineering'), ('Electronics & Communication Engineering', 'Electronics & Communication Engineering'), ('Electrical Power and Control Engineering', 'Electrical Power and Control Engineering'), ('Software Engineering', 'Software Engineering'), ('Architecture', 'Architecture'), ('Civil Engineering', 'Civil Engineering'), ('Water Resources Engineering', 'Water Resources Engineering'), ('Chemical Engineering', 'Chemical Engineering'), ('Material Science and Engineering', 'Material Science and Engineering'), ('Mechanical Engineering', 'Mechanical Engineering')], default=None, max_length=50)),
                ('qualifications', models.CharField(choices=[('Bachelor', 'Bachelor'), ('Master', 'Master'), ('Doctorate', 'Doctorate'), ('Bachelor_Doctorate', 'Both Bachelor and Doctorate'), ('All', 'All (Bachelor, Master, Doctorate)'), ('Doctorate_Master', 'Doctorate and Master')], max_length=50)),
                ('years_of_experience', models.IntegerField()),
                ('expertise', models.TextField()),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='staff_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'staff_profile',
            },
        ),
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('student_id', models.CharField(max_length=50, unique=True)),
                ('department', models.CharField(choices=[('Applied Biology Program', 'Applied Biology Program'), ('Applied Chemistry', 'Applied Chemistry'), ('Applied Physics', 'Applied Physics'), ('Applied Geology', 'Applied Geology'), ('Applied Mathematics', 'Applied Mathematics'), ('Industrial Chemistry', 'Industrial Chemistry'), ('Pharmacy Program', 'Pharmacy Program'), ('Computer Science and Engineering', 'Computer Science and Engineering'), ('Electronics & Communication Engineering', 'Electronics & Communication Engineering'), ('Electrical Power and Control Engineering', 'Electrical Power and Control Engineering'), ('Software Engineering', 'Software Engineering'), ('Architecture', 'Architecture'), ('Civil Engineering', 'Civil Engineering'), ('Water Resources Engineering', 'Water Resources Engineering'), ('Chemical Engineering', 'Chemical Engineering'), ('Material Science and Engineering', 'Material Science and Engineering'), ('Mechanical Engineering', 'Mechanical Engineering')], default=None, max_length=50)),
                ('admission_year', models.IntegerField(default=2013)),
                ('graduation_year', models.IntegerField()),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('bio', models.TextField(blank=True, null=True)),
                ('profile_pic', models.ImageField(blank=True, null=True, upload_to='Profile_Picture/Srudent/')),
                ('skills', models.JSONField(blank=True, null=True)),
                ('interests', models.JSONField(blank=True, null=True)),
                ('achievements', models.JSONField(blank=True, null=True)),
                ('activities', models.JSONField(blank=True, null=True)),
                ('professional_experiences', models.JSONField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'student_profile',
            },
        ),
        migrations.CreateModel(
            name='Connection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('requestee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_connections', to=settings.AUTH_USER_MODEL)),
                ('requester', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='requested_connections', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'connections',
                'unique_together': {('requester', 'requestee')},
            },
        ),
    ]
